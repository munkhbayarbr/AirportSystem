@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Server.DTO
@implements IDisposable
<h1 style="background-color: #2247bf; color: white;">UlaanBator Airport  <span style="float:right;">@currentTime.ToString("yyyy-MM-dd HH:mm:ss")</span></h1>


@if (flights == null || !flights.Any())
{
    <p>No flight data available.</p>
}
else
{

    <div style="display: flex; min-height: 100vh; background-color: #2247bf; color: white;">

        <div style="flex: 1; padding: 10px; border-right: 1px solid #ccc;">
            <h4>Arrival</h4>
            <table class="table table-bordered" style="color: white;">
                <thead>
                    <tr>
                        <th>Flight Number</th>
                        <th>Origin</th>
                        <th>Arrival Time</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var flight in flights)
                    {
                        if (flight.Arrival == "Ulaanbaatar")
                        {
                            <tr>
                                <td>@flight.FlightNumber</td>
                                <td>@flight.Departure</td>
                                <td>@flight.ArrivalTime.ToString("HH:mm")</td>
                                <td style="@(GetStatusStyle(flight.Status))">@flight.Status</td>
                            </tr>
                        }
                        
                    }
                </tbody>
            </table>
        </div>

        <div style="flex: 1; padding: 10px;">
            <h4>Departure</h4>
            <table class="table table-bordered" style="color: white;">
                <thead>
                    <tr>
                        <th>Flight Number</th>
                        <th>Destination</th>
                        <th>Departure Time</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var flight in flights)
                    {
                        if (flight.Arrival != "Ulaanbaatar")
                        {
                            <tr>
                                <td>@flight.FlightNumber</td>
                                <td>@flight.Arrival</td>
                                <td>@flight.DepartureTime.ToString("HH:mm")</td>
                                <td style="@(GetStatusStyle(flight.Status))">@flight.Status</td>
                            </tr>
                        }
                        
                    }
                </tbody>
            </table>
        </div>
    </div>


    
}

@code {
    private IEnumerable<FlightReadDTO> flights;
    HubConnection connection;
    private DateTime currentTime = DateTime.Now;
    private Timer? timer;


    protected override async Task OnInitializedAsync()
    {

        timer = new Timer(UpdateTime, null, 0, 1000);

        connection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7132/flighthub")
                .WithAutomaticReconnect()
                .Build();

        connection.On<IEnumerable<FlightReadDTO>>("ReceiveAllFlights", (flightsDoc) =>
        {
            flights = flightsDoc;
            InvokeAsync(StateHasChanged);
        });

        connection.On<FlightReadDTO>("ReceiveFlightStatusUpdate", (flight) =>
        {
            UpdateFlightStatus(flight);
            InvokeAsync(StateHasChanged);
        });

        await connection.StartAsync();


        await connection.InvokeAsync("RequestFlightList");



    }

    private void UpdateFlightStatus(FlightReadDTO flight)
    {
        var flightList = flights.ToList();

        for (int i = 0; i < flightList.Count; i++)
        {
            if (flightList[i].FlightNumber == flight.FlightNumber)
            {
                flightList[i] = flight;
                break;
            }
        }

        flights = flightList;
    }

    private string GetStatusStyle(string status)
    {
        return status.ToLower() switch
        {
            "cancelled" => "color: white; background-color: red;",
            "delayed" => "color: white; background-color: orange;",
            "boarding" => "color: white; background-color: green;",        
            "landed" => "color: white; background-color: darkcyan;",        
            "departed" => "color: white; background-color: darkslategray;", 
            "on time" => "color: white; background-color: green;",
            "flying" => "color: white; background-color: #2247bf;",
            _ => "color: black; background-color: lightgray;"
        };

    }


    
    
    

    private void UpdateTime(object? state)
    {
        currentTime = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}